package org.generated.server;

import com.fasterxml.jackson.core.JsonFactory;
import io.opentelemetry.instrumentation.annotations.WithSpan;
import java.io.IOException;
import java.lang.String;
import org.codingmatters.rest.api.Processor;
import org.codingmatters.rest.api.RequestDelegate;
import org.codingmatters.rest.api.ResponseDelegate;
import org.generated.api.Child1GetRequest;
import org.generated.api.Child1GetResponse;
import org.generated.api.Child2GetRequest;
import org.generated.api.Child2GetResponse;
import org.generated.api.RootDeleteRequest;
import org.generated.api.RootDeleteResponse;
import org.generated.api.RootGetRequest;
import org.generated.api.RootGetResponse;
import org.generated.api.SubchildGetRequest;
import org.generated.api.SubchildGetResponse;
import org.generated.api.TestAPIHandlers;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TestAPIProcessor implements Processor {
  private static Logger log = LoggerFactory.getLogger(TestAPIProcessor.class);

  private final String apiPath;

  private final JsonFactory factory;

  private final TestAPIHandlers handlers;

  public TestAPIProcessor(String apiPath, JsonFactory factory, TestAPIHandlers handlers) {
    this.apiPath = apiPath;
    this.factory = factory;
    this.handlers = handlers;
  }

  @WithSpan
  public void process(RequestDelegate requestDelegate, ResponseDelegate responseDelegate) throws
      IOException {
    if (requestDelegate.pathMatcher(this.apiPath + "/root/?").matches()) {
      if (requestDelegate.method().equals(RequestDelegate.Method.GET)) {
        this.processRootGetRequest(requestDelegate, responseDelegate);
        return;
      }
      if (requestDelegate.method().equals(RequestDelegate.Method.DELETE)) {
        this.processRootDeleteRequest(requestDelegate, responseDelegate);
        return;
      }
    }
    if (requestDelegate.pathMatcher(this.apiPath + "/root/child1/?").matches()) {
      if (requestDelegate.method().equals(RequestDelegate.Method.GET)) {
        this.processChild1GetRequest(requestDelegate, responseDelegate);
        return;
      }
    }
    if (requestDelegate.pathMatcher(this.apiPath + "/root/child1/subchild/?").matches()) {
      if (requestDelegate.method().equals(RequestDelegate.Method.GET)) {
        this.processSubchildGetRequest(requestDelegate, responseDelegate);
        return;
      }
    }
    if (requestDelegate.pathMatcher(this.apiPath + "/root/child2/?").matches()) {
      if (requestDelegate.method().equals(RequestDelegate.Method.GET)) {
        this.processChild2GetRequest(requestDelegate, responseDelegate);
        return;
      }
    }
  }

  @WithSpan
  private void processRootGetRequest(RequestDelegate requestDelegate,
      ResponseDelegate responseDelegate) throws IOException {
    RootGetRequest.Builder requestBuilder = RootGetRequest.builder();
    if (this.handlers.rootGetHandler() != null) {
      RootGetResponse response = this.handlers.rootGetHandler().apply(requestBuilder.build());
      if (response != null) {
      }
    } else {
      responseDelegate.status(405);
      responseDelegate.contenType("application/json");
      responseDelegate.payload("{\"code\":\"GONE\",\"description\":\"not implemented\"}", "utf-8");
    }
  }

  @WithSpan
  private void processRootDeleteRequest(RequestDelegate requestDelegate,
      ResponseDelegate responseDelegate) throws IOException {
    RootDeleteRequest.Builder requestBuilder = RootDeleteRequest.builder();
    if (this.handlers.rootDeleteHandler() != null) {
      RootDeleteResponse response = this.handlers.rootDeleteHandler().apply(requestBuilder.build());
      if (response != null) {
      }
    } else {
      responseDelegate.status(405);
      responseDelegate.contenType("application/json");
      responseDelegate.payload("{\"code\":\"GONE\",\"description\":\"not implemented\"}", "utf-8");
    }
  }

  @WithSpan
  private void processChild1GetRequest(RequestDelegate requestDelegate,
      ResponseDelegate responseDelegate) throws IOException {
    Child1GetRequest.Builder requestBuilder = Child1GetRequest.builder();
    if (this.handlers.child1GetHandler() != null) {
      Child1GetResponse response = this.handlers.child1GetHandler().apply(requestBuilder.build());
      if (response != null) {
      }
    } else {
      responseDelegate.status(405);
      responseDelegate.contenType("application/json");
      responseDelegate.payload("{\"code\":\"GONE\",\"description\":\"not implemented\"}", "utf-8");
    }
  }

  @WithSpan
  private void processSubchildGetRequest(RequestDelegate requestDelegate,
      ResponseDelegate responseDelegate) throws IOException {
    SubchildGetRequest.Builder requestBuilder = SubchildGetRequest.builder();
    if (this.handlers.subchildGetHandler() != null) {
      SubchildGetResponse response = this.handlers.subchildGetHandler().apply(requestBuilder.build());
      if (response != null) {
      }
    } else {
      responseDelegate.status(405);
      responseDelegate.contenType("application/json");
      responseDelegate.payload("{\"code\":\"GONE\",\"description\":\"not implemented\"}", "utf-8");
    }
  }

  @WithSpan
  private void processChild2GetRequest(RequestDelegate requestDelegate,
      ResponseDelegate responseDelegate) throws IOException {
    Child2GetRequest.Builder requestBuilder = Child2GetRequest.builder();
    if (this.handlers.child2GetHandler() != null) {
      Child2GetResponse response = this.handlers.child2GetHandler().apply(requestBuilder.build());
      if (response != null) {
      }
    } else {
      responseDelegate.status(405);
      responseDelegate.contenType("application/json");
      responseDelegate.payload("{\"code\":\"GONE\",\"description\":\"not implemented\"}", "utf-8");
    }
  }
}
